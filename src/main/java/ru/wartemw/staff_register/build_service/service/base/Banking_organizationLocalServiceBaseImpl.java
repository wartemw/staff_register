package ru.wartemw.staff_register.build_service.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import ru.wartemw.staff_register.build_service.model.Banking_organization;
import ru.wartemw.staff_register.build_service.service.Banking_organizationLocalService;
import ru.wartemw.staff_register.build_service.service.persistence.Banking_organizationPersistence;
import ru.wartemw.staff_register.build_service.service.persistence.Position_directoryPersistence;
import ru.wartemw.staff_register.build_service.service.persistence.WorkerPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the banking_organization local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ru.wartemw.staff_register.build_service.service.impl.Banking_organizationLocalServiceImpl}.
 * </p>
 *
 * @author wARTEMw
 * @see ru.wartemw.staff_register.build_service.service.impl.Banking_organizationLocalServiceImpl
 * @see ru.wartemw.staff_register.build_service.service.Banking_organizationLocalServiceUtil
 * @generated
 */
public abstract class Banking_organizationLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements Banking_organizationLocalService,
        IdentifiableBean {
    @BeanReference(type = ru.wartemw.staff_register.build_service.service.Banking_organizationLocalService.class)
    protected ru.wartemw.staff_register.build_service.service.Banking_organizationLocalService banking_organizationLocalService;
    @BeanReference(type = Banking_organizationPersistence.class)
    protected Banking_organizationPersistence banking_organizationPersistence;
    @BeanReference(type = ru.wartemw.staff_register.build_service.service.Position_directoryLocalService.class)
    protected ru.wartemw.staff_register.build_service.service.Position_directoryLocalService position_directoryLocalService;
    @BeanReference(type = Position_directoryPersistence.class)
    protected Position_directoryPersistence position_directoryPersistence;
    @BeanReference(type = ru.wartemw.staff_register.build_service.service.WorkerLocalService.class)
    protected ru.wartemw.staff_register.build_service.service.WorkerLocalService workerLocalService;
    @BeanReference(type = WorkerPersistence.class)
    protected WorkerPersistence workerPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private Banking_organizationLocalServiceClpInvoker _clpInvoker = new Banking_organizationLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link ru.wartemw.staff_register.build_service.service.Banking_organizationLocalServiceUtil} to access the banking_organization local service.
     */

    /**
     * Adds the banking_organization to the database. Also notifies the appropriate model listeners.
     *
     * @param banking_organization the banking_organization
     * @return the banking_organization that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Banking_organization addBanking_organization(
        Banking_organization banking_organization) throws SystemException {
        banking_organization.setNew(true);

        return banking_organizationPersistence.update(banking_organization);
    }

    /**
     * Creates a new banking_organization with the primary key. Does not add the banking_organization to the database.
     *
     * @param banking_organizationID the primary key for the new banking_organization
     * @return the new banking_organization
     */
    @Override
    public Banking_organization createBanking_organization(
        long banking_organizationID) {
        return banking_organizationPersistence.create(banking_organizationID);
    }

    /**
     * Deletes the banking_organization with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param banking_organizationID the primary key of the banking_organization
     * @return the banking_organization that was removed
     * @throws PortalException if a banking_organization with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Banking_organization deleteBanking_organization(
        long banking_organizationID) throws PortalException, SystemException {
        return banking_organizationPersistence.remove(banking_organizationID);
    }

    /**
     * Deletes the banking_organization from the database. Also notifies the appropriate model listeners.
     *
     * @param banking_organization the banking_organization
     * @return the banking_organization that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Banking_organization deleteBanking_organization(
        Banking_organization banking_organization) throws SystemException {
        return banking_organizationPersistence.remove(banking_organization);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Banking_organization.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return banking_organizationPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.wartemw.staff_register.build_service.model.impl.Banking_organizationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return banking_organizationPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.wartemw.staff_register.build_service.model.impl.Banking_organizationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return banking_organizationPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return banking_organizationPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return banking_organizationPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Banking_organization fetchBanking_organization(
        long banking_organizationID) throws SystemException {
        return banking_organizationPersistence.fetchByPrimaryKey(banking_organizationID);
    }

    /**
     * Returns the banking_organization with the primary key.
     *
     * @param banking_organizationID the primary key of the banking_organization
     * @return the banking_organization
     * @throws PortalException if a banking_organization with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Banking_organization getBanking_organization(
        long banking_organizationID) throws PortalException, SystemException {
        return banking_organizationPersistence.findByPrimaryKey(banking_organizationID);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return banking_organizationPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the banking_organizations.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.wartemw.staff_register.build_service.model.impl.Banking_organizationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of banking_organizations
     * @param end the upper bound of the range of banking_organizations (not inclusive)
     * @return the range of banking_organizations
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Banking_organization> getBanking_organizations(int start,
        int end) throws SystemException {
        return banking_organizationPersistence.findAll(start, end);
    }

    /**
     * Returns the number of banking_organizations.
     *
     * @return the number of banking_organizations
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getBanking_organizationsCount() throws SystemException {
        return banking_organizationPersistence.countAll();
    }

    /**
     * Updates the banking_organization in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param banking_organization the banking_organization
     * @return the banking_organization that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Banking_organization updateBanking_organization(
        Banking_organization banking_organization) throws SystemException {
        return banking_organizationPersistence.update(banking_organization);
    }

    /**
     * Returns the banking_organization local service.
     *
     * @return the banking_organization local service
     */
    public ru.wartemw.staff_register.build_service.service.Banking_organizationLocalService getBanking_organizationLocalService() {
        return banking_organizationLocalService;
    }

    /**
     * Sets the banking_organization local service.
     *
     * @param banking_organizationLocalService the banking_organization local service
     */
    public void setBanking_organizationLocalService(
        ru.wartemw.staff_register.build_service.service.Banking_organizationLocalService banking_organizationLocalService) {
        this.banking_organizationLocalService = banking_organizationLocalService;
    }

    /**
     * Returns the banking_organization persistence.
     *
     * @return the banking_organization persistence
     */
    public Banking_organizationPersistence getBanking_organizationPersistence() {
        return banking_organizationPersistence;
    }

    /**
     * Sets the banking_organization persistence.
     *
     * @param banking_organizationPersistence the banking_organization persistence
     */
    public void setBanking_organizationPersistence(
        Banking_organizationPersistence banking_organizationPersistence) {
        this.banking_organizationPersistence = banking_organizationPersistence;
    }

    /**
     * Returns the position_directory local service.
     *
     * @return the position_directory local service
     */
    public ru.wartemw.staff_register.build_service.service.Position_directoryLocalService getPosition_directoryLocalService() {
        return position_directoryLocalService;
    }

    /**
     * Sets the position_directory local service.
     *
     * @param position_directoryLocalService the position_directory local service
     */
    public void setPosition_directoryLocalService(
        ru.wartemw.staff_register.build_service.service.Position_directoryLocalService position_directoryLocalService) {
        this.position_directoryLocalService = position_directoryLocalService;
    }

    /**
     * Returns the position_directory persistence.
     *
     * @return the position_directory persistence
     */
    public Position_directoryPersistence getPosition_directoryPersistence() {
        return position_directoryPersistence;
    }

    /**
     * Sets the position_directory persistence.
     *
     * @param position_directoryPersistence the position_directory persistence
     */
    public void setPosition_directoryPersistence(
        Position_directoryPersistence position_directoryPersistence) {
        this.position_directoryPersistence = position_directoryPersistence;
    }

    /**
     * Returns the worker local service.
     *
     * @return the worker local service
     */
    public ru.wartemw.staff_register.build_service.service.WorkerLocalService getWorkerLocalService() {
        return workerLocalService;
    }

    /**
     * Sets the worker local service.
     *
     * @param workerLocalService the worker local service
     */
    public void setWorkerLocalService(
        ru.wartemw.staff_register.build_service.service.WorkerLocalService workerLocalService) {
        this.workerLocalService = workerLocalService;
    }

    /**
     * Returns the worker persistence.
     *
     * @return the worker persistence
     */
    public WorkerPersistence getWorkerPersistence() {
        return workerPersistence;
    }

    /**
     * Sets the worker persistence.
     *
     * @param workerPersistence the worker persistence
     */
    public void setWorkerPersistence(WorkerPersistence workerPersistence) {
        this.workerPersistence = workerPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("ru.wartemw.staff_register.build_service.model.Banking_organization",
            banking_organizationLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "ru.wartemw.staff_register.build_service.model.Banking_organization");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Banking_organization.class;
    }

    protected String getModelClassName() {
        return Banking_organization.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = banking_organizationPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
